// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`rendering snapshots should render valid snapshot 1`] = `
<div>
  <UpsertThreadModal
    characters={
      Array [
        Object {
          "characterId": 1,
        },
        Object {
          "characterId": 2,
        },
      ]
    }
    closeUpsertThreadModal={[MockFunction]}
    isUpsertThreadModalOpen={true}
    submitUpsertThread={[MockFunction]}
    threadToEdit={
      Object {
        "threadId": 5,
        "userTitle": "My Test Thread",
      }
    }
  />
  <UpsertCharacterModal
    characterToEdit={
      Object {
        "characterId": 3,
        "characterName": "My Test Character",
      }
    }
    closeUpsertCharacterModal={[MockFunction]}
    isUpsertCharacterModalOpen={true}
    submitUpsertCharacter={[MockFunction]}
  />
  <UpsertPublicViewModal
    characters={
      Array [
        Object {
          "characterId": 1,
        },
        Object {
          "characterId": 2,
        },
      ]
    }
    closeUpsertPublicViewModal={[MockFunction]}
    columns={
      Object {
        "TEST_COLUMN": Object {
          "key": "testKey",
          "name": "Test Value",
        },
      }
    }
    isUpsertPublicViewModalOpen={true}
    submitUpsertPublicView={[MockFunction]}
    tags={
      Array [
        "tag1",
        "tag2",
        "tag3",
      ]
    }
    viewToEdit={
      Object {
        "id": 10,
        "name": "My Test View",
      }
    }
  />
  <GenericConfirmationModal
    bodyText={
      <span>
        Are you sure you want to untrack 
        <strong>
          My Test Thread
        </strong>
        ?
      </span>
    }
    closeButtonText="Cancel"
    closeCallback={[MockFunction]}
    data={
      Object {
        "threadId": 5,
        "userTitle": "My Test Thread",
      }
    }
    headerText="Confirm Thread Untracking"
    isModalOpen={true}
    submitButtonText="Untrack"
    submitCallback={[MockFunction]}
  />
  <GenericConfirmationModal
    bodyText="Are you sure you want to untrack 2 threads?"
    closeButtonText="Cancel"
    closeCallback={[MockFunction]}
    data={
      Array [
        Object {
          "threadId": 1,
        },
        Object {
          "threadId": 2,
        },
      ]
    }
    headerText="Confirm Thread Untracking"
    isModalOpen={true}
    submitButtonText="Untrack"
    submitCallback={[MockFunction]}
  />
  <GenericConfirmationModal
    bodyText={
      <span>
        Are you sure you want to untrack
         
        <strong>
          My Test Character
        </strong>
        ? This will also untrack all threads associated with this character.
      </span>
    }
    closeButtonText="Cancel"
    closeCallback={[MockFunction]}
    data={
      Object {
        "characterId": 3,
        "characterName": "My Test Character",
      }
    }
    headerText="Confirm Character Untracking"
    isModalOpen={true}
    submitButtonText="Untrack"
    submitCallback={[MockFunction]}
  />
  <GenericConfirmationModal
    bodyText={
      <span>
        Are you sure you want to delete 
        <strong>
          My Test View
        </strong>
        ?
      </span>
    }
    closeButtonText="Cancel"
    closeCallback={[MockFunction]}
    data={
      Object {
        "id": 10,
        "name": "My Test View",
      }
    }
    headerText="Confirm Public View Deletion"
    isModalOpen={true}
    submitButtonText="Delete"
    submitCallback={[MockFunction]}
  />
  <GenericConfirmationModal
    bodyText={
      <span>
        Are you sure you want to change the tag
         
        <strong>
          Test Tag
        </strong>
         to
         
        <strong>
          Test Tag Edited
        </strong>
         on all your threads?
      </span>
    }
    closeButtonText="Cancel"
    closeCallback={[MockFunction]}
    data={
      Object {
        "selectedTag": "Test Tag",
        "updatedValue": "Test Tag Edited",
      }
    }
    headerText="Confirm Updated Tag Value"
    isModalOpen={true}
    submitButtonText="Update Tag"
    submitCallback={[MockFunction]}
  />
  <GenericConfirmationModal
    bodyText={
      <span>
        Are you sure you want to remove the tag
         
        <strong>
          Test Tag
        </strong>
         from all your threads?
      </span>
    }
    closeButtonText="Cancel"
    closeCallback={[MockFunction]}
    data={
      Object {
        "selectedTag": "Test Tag",
        "updatedValue": "Test Tag Edited",
      }
    }
    headerText="Confirm Deleted Tag Value"
    isModalOpen={true}
    submitButtonText="Delete Tag"
    submitCallback={[MockFunction]}
  />
  <GenericConfirmationModal
    bodyText={
      <span>
        Are you sure you want to delete your account?
         
        <strong>
          This action cannot be undone.
        </strong>
         You will be unable to access any tracked characters or threads in the future, unless you create a new account and re-add them.
      </span>
    }
    closeButtonText="Cancel"
    closeCallback={[MockFunction]}
    data={null}
    headerText="Really Delete Account?"
    isModalOpen={true}
    submitButtonText="Confirm Deletion"
    submitCallback={[MockFunction]}
  />
</div>
`;

exports[`rendering snapshots should render valid snapshot with missing character name 1`] = `
<div>
  <UpsertThreadModal
    characters={
      Array [
        Object {
          "characterId": 1,
        },
        Object {
          "characterId": 2,
        },
      ]
    }
    closeUpsertThreadModal={[MockFunction]}
    isUpsertThreadModalOpen={true}
    submitUpsertThread={[MockFunction]}
    threadToEdit={
      Object {
        "threadId": 5,
        "userTitle": "My Test Thread",
      }
    }
  />
  <UpsertCharacterModal
    characterToEdit={
      Object {
        "id": 12,
        "urlIdentifier": "my-test-character",
      }
    }
    closeUpsertCharacterModal={[MockFunction]}
    isUpsertCharacterModalOpen={true}
    submitUpsertCharacter={[MockFunction]}
  />
  <UpsertPublicViewModal
    characters={
      Array [
        Object {
          "characterId": 1,
        },
        Object {
          "characterId": 2,
        },
      ]
    }
    closeUpsertPublicViewModal={[MockFunction]}
    columns={
      Object {
        "TEST_COLUMN": Object {
          "key": "testKey",
          "name": "Test Value",
        },
      }
    }
    isUpsertPublicViewModalOpen={true}
    submitUpsertPublicView={[MockFunction]}
    tags={
      Array [
        "tag1",
        "tag2",
        "tag3",
      ]
    }
    viewToEdit={
      Object {
        "id": 10,
        "name": "My Test View",
      }
    }
  />
  <GenericConfirmationModal
    bodyText={
      <span>
        Are you sure you want to untrack 
        <strong>
          My Test Thread
        </strong>
        ?
      </span>
    }
    closeButtonText="Cancel"
    closeCallback={[MockFunction]}
    data={
      Object {
        "threadId": 5,
        "userTitle": "My Test Thread",
      }
    }
    headerText="Confirm Thread Untracking"
    isModalOpen={true}
    submitButtonText="Untrack"
    submitCallback={[MockFunction]}
  />
  <GenericConfirmationModal
    bodyText="Are you sure you want to untrack 2 threads?"
    closeButtonText="Cancel"
    closeCallback={[MockFunction]}
    data={
      Array [
        Object {
          "threadId": 1,
        },
        Object {
          "threadId": 2,
        },
      ]
    }
    headerText="Confirm Thread Untracking"
    isModalOpen={true}
    submitButtonText="Untrack"
    submitCallback={[MockFunction]}
  />
  <GenericConfirmationModal
    bodyText={
      <span>
        Are you sure you want to untrack
         
        <strong>
          my-test-character
        </strong>
        ? This will also untrack all threads associated with this character.
      </span>
    }
    closeButtonText="Cancel"
    closeCallback={[MockFunction]}
    data={
      Object {
        "id": 12,
        "urlIdentifier": "my-test-character",
      }
    }
    headerText="Confirm Character Untracking"
    isModalOpen={true}
    submitButtonText="Untrack"
    submitCallback={[MockFunction]}
  />
  <GenericConfirmationModal
    bodyText={
      <span>
        Are you sure you want to delete 
        <strong>
          My Test View
        </strong>
        ?
      </span>
    }
    closeButtonText="Cancel"
    closeCallback={[MockFunction]}
    data={
      Object {
        "id": 10,
        "name": "My Test View",
      }
    }
    headerText="Confirm Public View Deletion"
    isModalOpen={true}
    submitButtonText="Delete"
    submitCallback={[MockFunction]}
  />
  <GenericConfirmationModal
    bodyText={
      <span>
        Are you sure you want to change the tag
         
        <strong>
          Test Tag
        </strong>
         to
         
        <strong>
          Test Tag Edited
        </strong>
         on all your threads?
      </span>
    }
    closeButtonText="Cancel"
    closeCallback={[MockFunction]}
    data={
      Object {
        "selectedTag": "Test Tag",
        "updatedValue": "Test Tag Edited",
      }
    }
    headerText="Confirm Updated Tag Value"
    isModalOpen={true}
    submitButtonText="Update Tag"
    submitCallback={[MockFunction]}
  />
  <GenericConfirmationModal
    bodyText={
      <span>
        Are you sure you want to remove the tag
         
        <strong>
          Test Tag
        </strong>
         from all your threads?
      </span>
    }
    closeButtonText="Cancel"
    closeCallback={[MockFunction]}
    data={
      Object {
        "selectedTag": "Test Tag",
        "updatedValue": "Test Tag Edited",
      }
    }
    headerText="Confirm Deleted Tag Value"
    isModalOpen={true}
    submitButtonText="Delete Tag"
    submitCallback={[MockFunction]}
  />
  <GenericConfirmationModal
    bodyText={
      <span>
        Are you sure you want to delete your account?
         
        <strong>
          This action cannot be undone.
        </strong>
         You will be unable to access any tracked characters or threads in the future, unless you create a new account and re-add them.
      </span>
    }
    closeButtonText="Cancel"
    closeCallback={[MockFunction]}
    data={null}
    headerText="Really Delete Account?"
    isModalOpen={true}
    submitButtonText="Confirm Deletion"
    submitCallback={[MockFunction]}
  />
</div>
`;
